name: Build and Publish OneBot Adapter

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]
  push:
    tags:
      - 'v*'  # 匹配 v 开头的 tag

permissions:
  contents: write  # 需要写入权限来创建 release

jobs:
  # 只在 PR 被合并到 main 分支时运行
  build-and-publish:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录和 tags
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      
      # 自动生成版本号
      - name: Generate version
        id: generate_version
        run: |
          # 获取最新的版本号
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          # 拆分版本号
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          # 增加补丁版本号
          PATCH=$((PATCH + 1))
          
          # 新版本号
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Generated new version: $NEW_VERSION (tag: $NEW_TAG)"
      
      # 创建新的 tag
      - name: Create Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}
      
      # 构建包
      - name: Build package
        run: |
          python -m build
        env:
          RELEASE_VERSION: ${{ env.NEW_VERSION }}
      
      # 上传构建产物
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: onebot-adapter-${{ env.NEW_VERSION }}
          path: dist/
      
      # 创建 Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
      
      # 发布到 PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
  
  # 处理手动创建的 tag
  release-from-tag:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      
      # 从 tag 获取版本号
      - name: Get version from tag
        id: get_version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      # 构建包
      - name: Build package
        run: |
          python -m build
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      
      # 上传构建产物
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: onebot-adapter-${{ env.RELEASE_VERSION }}
          path: dist/
      
      # 创建 Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
      
      # 发布到 PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true